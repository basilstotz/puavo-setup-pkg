#!/bin/sh

device="wg0"

get_my_address(){
#    echo get_my_adress
    url=$(puavo-conf puavo.wg.restapi.url)
    key=$(puavo-conf puavo.wg.restapi.key)
    school=$(puavo-conf puavo.wg.network.name)
    hostname=$(cat /etc/puavo/hostname)
    addr=""

    erfolg=false    
    until $erfolg; do
	nm-online -q -t 3600

        answer=$(curl -s --get --data-urlencode "apikey=$key" --data-urlencode "publickey=$my_publickey" $url/$school/$hostname)  


	if test -n "answer"; then
	    erfolg=true
            my_address=$(echo $answer|cut -d" " -f1)
            subnetmask=$(echo $answer|cut -d" " -f2)
            server_address=$(echo $answer|cut -d" " -f3)
            netmask=$(echo $answer|cut -d" " -f4)
            echo $answer|cut -d" " -f5 > /tmp/preshared
	else
	    echo sleep
	    sleep 10
	fi	
    done
}

link_down(){
    ip link|grep -q $device && ip link del $device
}


############ main #########################

#trap link_down EXIT HUP INT QUIT KILL TERM


#peer
endpoint=$(puavo-conf puavo.wg.peer.endpoint)
publickey=$(puavo-conf puavo.wg.peer.public)
#presharedkey=$(puavo-conf puavo.wg.peer.preshared)
#allowedmask=$(puavo-conf puavo.wg.peer.allowedips)
#subnetmask=$(puavo-conf puavo.wg.network.netmask)
skope=$(puavo-conf puavo.wg.network.skope)


#echo puavo-conf $endpoint -  $publickey # - $presharedkey - $allowedips -

test -n "$endpoint" || exit 0
test -n "$publickey" || exit 0
#test -n "$presharedkey" || exit 0
#test -n "$allowedips" || exit 0
test -n "$skope" || exit 0

my_privatekey=$(wg genkey)
echo $my_privatekey > /tmp/private
my_publickey=$(echo $my_privatekey|wg pubkey)

#echo "my_keys: $my_privatekey $my_publickey"

get_my_address

test -n "$my_address" || exit 1

link_down

#echo "configure...."
ip link add dev $device type wireguard;
case $skope; in
    none)
	ip address add dev $device $my_address peer $server_address
	allowedips=$serverip/32
	;;
    school)
	ip address add dev $device $my_address/$subnetmask
	allowedips=$(ipcalc $my_address/$subnetmask|grep Network|xargs|cut -d" " -f2)\
	;;
    all)
	ip address add dev $device $my_address/$netmask
	allowdeips=$(ipcalc $my_address/$netmask|grep Network|xargs|cut -d" " -f2)\
	;;
    *)
	exit 1
	;;
esac
 
ip link set multicast on dev $device;

# maybe: private-key <(echo "$privatekey")

wg set $device\
   private-key /tmp/private\
   preshared-key /tmp/preshared\
   peer $publickey\
   endpoint $endpoint\
   allowed-ips $allowdips\
   persistent-keepalive 25

rm /tmp/private
rm /tmp/preshared

ip link set $device up; 
#ip route add $allowedips dev $device;

echo "link is up"


exit 0
 
